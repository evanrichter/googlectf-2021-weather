addr     source             inst

                            operation   dest, source  ("intel" syntax)


   0:                       jmp  --> 0x34

                     r0: xor key (0xabababab)
                     r1: buffer start
                     r2: buffer end

0x07: %3.1hM                mov  r3, [r1]
0x0d: %3.0lE                xor  r3, r0
0x13: %+1.3lM               mov  [r1], r3
0x1a: %1.4llS               add  r1, 0x4
0x21: %3.1lM                mov  r3, r1
0x27: %3.2lO                sub  r3, r2
0x2d: %-7.3C                jn   r3 --> 0x7     (jump to 7 if r3 is negative)


                    start:
0x34: %0.4096hhM            mov  r0, [0x1000]   (user input!)

                    take first byte of user input: 0xab and make it 0xabababab
0x3e: %0.255llI             and  r0, 0xff
0x47: %1.0lM                mov  r1, r0
0x4d: %1.8llL               shl  r1, 0x8
0x54: %0.1lU                or   r0, r1
0x5a: %1.0lM                mov  r1, r0
0x60: %1.16llL              shl  r1, 0x10
0x68: %0.1lU                or   r0, r1      <- xor key
0x6e: %1.200llM             mov  r1, 0xc8    <- start xoring here
0x77: %2.1788llM            mov  r2, 0x6fc   <- end xoring here
0x81: %7C                   jmp   --> 0x7

0x84: %-6144.1701736302llM  mov  [0x1800], 0x656e6f6e    (string "none")
0x98: %0.200hhM             mov  r0, [0xc8]      <- read byte of next program
0xa1: %0.255llI             and  r0, 0xff
0xaa: %0.37llO              sub  r0, 0x25        <- check if it's a '%'!
                                                    xor key must be 0x54
0xb2: %0200.0C              jz   r0 --> 0xc8   (jump to 0xc8 if r0 is zero)



        stage2:

0x0c8:  mov  r4, 0x1388
0x0d2:  mov  r0, 0x3390
0x0dd:  jmp  --> 0x151
0x0e2:  mov  r0, 0x0
0x0e9:  jmp  --> 0x1f4
0x0ee:  jmp  --> 0x4ee
0x0f4:   jz  r0 --> 0x28d
0x0fc:  ret

zero_r1:  mov  r1, 0x0
0x104:  ret

0x105:  mov  r3, r0
0x10b:  mod  r3, r2
0x111:   jz  r3 --> zero_r1
0x119:  add  r2, 0x1
0x120:  mov  r3, r2
0x126:  mul  r3, r3
0x12c:  sub  r3, r0
0x132:  sub  r3, 0x1
0x139:   jn  r3 --> 0x105
0x141:  ret

0x142:  mov  [r4], r0
0x149:  add  r4, 0x2
0x150:  ret


   stage2_a:
0x151:  mov  r1, 0x1
0x158:  mov  r2, 0x2
0x15f:  jmp  --> 0x105
0x164:  jgz  r1 --> 0x142
0x16c:  add  r0, 0x1
0x173:  mov  r1, 0x3520
0x17e:  sub  r1, r0
0x184:  jgz  r1 --> 0x151
0x18c:  ret

0x18d:  mov  r0, 0x0
0x194:  ret

0x195:  div  r0, 0x2
0x19c:  ret

0x19d:  mul  r0, 0x3
0x1a4:  add  r0, 0x1
0x1ab:  ret

0x1ac:  mov  r1, r0
0x1b2:  mod  r1, 0x2
0x1b9:   jz  r1 --> 0x195
0x1c1:  jgz  r1 --> 0x19d
0x1c9:  jmp  --> 0x1d6
0x1ce:  add  r0, 0x1
0x1d5:  ret

0x1d6:  mov  r1, r0
0x1dc:  sub  r1, 0x1
0x1e3:   jz  r1 --> 0x18d
0x1eb:  jgz  r1 --> 0x1ac
0x1f3:  ret

0x1f4:  mov  r2, r0
0x1fa:  add  r2, 0x1000
0x204:  mov  r4, [r2]
0x20a:  and  r4, 0xff
0x213:  jgz  r4 --> 0x21c
0x21b:  ret

0x21c:  mov  r2, r0
0x222:  mul  r2, 0x2
0x229:  add  r2, 0x1388
0x233:  mov  r2, [r2]
0x239:  and  r2, 0xff
0x242:  xor  r4, r2
0x248:  add  r0, 0x1
0x24f:  mov  r2, r0
0x255:  jmp  --> 0x1d6
0x25a:  add  r4, r0
0x260:  and  r4, 0xff
0x269:  mov  r0, r2
0x26f:  sub  r2, 0x1
0x276:  add  r2, 0x1194
0x280:  mov  [r2], r4
0x287:  jmp  --> 0x1f4
0x28c:  ret

0x28d:  mov  r0, 0x75bcd15
0x29c:  mov  r1, 0x0
0x2a3:  add  r1, 0x1000
0x2ad:  mov  r1, [r1]
0x2b3:  xor  r0, r1
0x2b9:  mov  r2, 0x0
0x2c0:  add  r2, 0x3278f102
0x2cf:  xor  r2, r0
0x2d5:  mov  r1, 0x0
0x2dc:  add  r1, 0x1800
0x2e6:  mov  [r1], r2
0x2ed:  mov  r1, 0x4
0x2f4:  add  r1, 0x1000
0x2fe:  mov  r1, [r1]
0x304:  xor  r0, r1
0x30a:  mov  r2, 0x0
0x311:  add  r2, 0x560aa747
0x321:  xor  r2, r0
0x327:  mov  r1, 0x4
0x32e:  add  r1, 0x1800
0x338:  mov  [r1], r2
0x33f:  mov  r1, 0x8
0x346:  add  r1, 0x1000
0x350:  mov  r1, [r1]
0x356:  xor  r0, r1
0x35c:  mov  r2, 0x0
0x363:  add  r2, 0x3e6fd176
0x373:  xor  r2, r0
0x379:  mov  r1, 0x8
0x380:  add  r1, 0x1800
0x38a:  mov  [r1], r2
0x391:  mov  r1, 0xc
0x399:  add  r1, 0x1000
0x3a3:  mov  r1, [r1]
0x3a9:  xor  r0, r1
0x3af:  mov  r2, 0x0
0x3b6:  add  r2, 0x156d86fa
0x3c5:  add  r2, 0x66c93320
0x3d5:  xor  r2, r0
0x3db:  mov  r1, 0xc
0x3e3:  add  r1, 0x1800
0x3ed:  mov  [r1], r2
0x3f4:  mov  r1, 0x10
0x3fc:  add  r1, 0x1000
0x406:  mov  r1, [r1]
0x40c:  xor  r0, r1
0x412:  mov  r2, 0x0
0x419:  add  r2, 0xe5dbc23
0x428:  xor  r2, r0
0x42e:  mov  r1, 0x10
0x436:  add  r1, 0x1800
0x440:  mov  [r1], r2
0x447:  mov  r1, 0x14
0x44f:  add  r1, 0x1000
0x459:  mov  r1, [r1]
0x45f:  xor  r0, r1
0x465:  mov  r2, 0x0
0x46c:  add  r2, 0xd3f894c
0x47b:  xor  r2, r0
0x481:  mov  r1, 0x14
0x489:  add  r1, 0x1800
0x493:  mov  [r1], r2
0x49a:  mov  r1, 0x18
0x4a2:  add  r1, 0x1000
0x4ac:  mov  r1, [r1]
0x4b2:  xor  r0, r1
0x4b8:  mov  r2, 0x0
0x4bf:  add  r2, 0x324fe212
0x4ce:  xor  r2, r0
0x4d4:  mov  r1, 0x18
0x4dc:  add  r1, 0x1800
0x4e6:  mov  [r1], r2
0x4ed:  ret

0x4ee:  mov  r0, 0x0
0x4f5:  mov  r1, 0x0
0x4fc:  add  r1, 0x1194
0x506:  mov  r1, [r1]
0x50c:  mov  r2, 0x0
0x513:  add  r2, 0x51eddb21
0x523:  add  r2, 0x648c4a88
0x533:  add  r2, 0x4355a74c
0x543:  xor  r1, r2
0x549:   or  r0, r1
0x54f:  mov  r1, 0x4
0x556:  add  r1, 0x1194
0x560:  mov  r1, [r1]
0x566:  mov  r2, 0x0
0x56d:  add  r2, 0x32333645
0x57c:  add  r2, 0x58728e64
0x58c:  xor  r1, r2
0x592:   or  r0, r1
0x598:  mov  r1, 0x8
0x59f:  add  r1, 0x1194
0x5a9:  mov  r1, [r1]
0x5af:  mov  r2, 0x0
0x5b6:  add  r2, 0x6f57a0a3
0x5c6:  xor  r1, r2
0x5cc:   or  r0, r1
0x5d2:  mov  r1, 0xc
0x5da:  add  r1, 0x1194
0x5e4:  mov  r1, [r1]
0x5ea:  mov  r2, 0x0
0x5f1:  add  r2, 0x22d9bbcc
0x600:  add  r2, 0x569fcabc
0x610:  xor  r1, r2
0x616:   or  r0, r1
0x61c:  mov  r1, 0x10
0x624:  add  r1, 0x1194
0x62e:  mov  r1, [r1]
0x634:  mov  r2, 0x0
0x63b:  add  r2, 0xd531548
0x64a:  xor  r1, r2
0x650:   or  r0, r1
0x656:  mov  r1, 0x14
0x65e:  add  r1, 0x1194
0x668:  mov  r1, [r1]
0x66e:  mov  r2, 0x0
0x675:  add  r2, 0x74c2318e
0x685:  add  r2, 0x7233f6a3
0x695:  xor  r1, r2
0x69b:   or  r0, r1
0x6a1:  mov  r1, 0x18
0x6a9:  add  r1, 0x1194
0x6b3:  mov  r1, [r1]
0x6b9:  mov  r2, 0x0
0x6c0:  add  r2, 0x6d12a1c5
0x6d0:  add  r2, 0x6c3422b6
0x6e0:  add  r2, 0xf213d9a
0x6ef:  xor  r1, r2
0x6f5:   or  r0, r1
0x6fb:  ret



rusty version stage2:

0x0c8:  s.r4 = 0x1388;
0x0d2:  s.r0 = 0x3390;
0x0dd:  stage2_151(&mut s);
0x0e2:  s.r0 = 0x0;
0x0e9:  stage2_1f4(&mut s);
0x0ee:  stage2_4ee(&mut s);
0x0f4:  if s.r0 == 0 { stage2_28d(&mut s); }
0x0fc:  ret

0x0fd:  s.r1 = 0x0;
0x104:  ret

0x105:  s.r3 = s.r0;
0x10b:  s.r3 %= s.r2;
0x111:  if s.r3 == 0 { stage2_fd(&mut s); }
0x119:  s.r2 += 0x1;
0x120:  s.r3 = s.r2;
0x126:  s.r3 *= s.r3;
0x12c:  s.r3 -= s.r0;
0x132:  s.r3 -= 0x1;
0x139:  if s.r3 < 0 { stage2_105(&mut s); }
0x141:  ret

0x142:  [r4] = s.r0;
0x149:  s.r4 += 0x2;
0x150:  ret

0x151:  s.r1 = 0x1;
0x158:  s.r2 = 0x2;
0x15f:  stage2_105(&mut s);
0x164:  if s.r1 > 0 { stage2_142(&mut s); }
0x16c:  s.r0 += 0x1;
0x173:  s.r1 = 0x3520;
0x17e:  s.r1 -= s.r0;
0x184:  if s.r1 > 0 { stage2_151(&mut s); }
0x18c:  ret

0x18d:  s.r0 = 0x0;
0x194:  ret

0x195:  s.r0 /= 0x2;
0x19c:  ret

0x19d:  s.r0 *= 0x3;
0x1a4:  s.r0 += 0x1;
0x1ab:  ret

0x1ac:  s.r1 = s.r0;
0x1b2:  s.r1 %= 0x2;
0x1b9:  if s.r1 == 0 { stage2_195(&mut s); }
0x1c1:  if s.r1 > 0 { stage2_19d(&mut s); }
0x1c9:  stage2_1d6(&mut s);
0x1ce:  s.r0 += 0x1;
0x1d5:  ret

0x1d6:  s.r1 = s.r0;
0x1dc:  s.r1 -= 0x1;
0x1e3:  if s.r1 == 0 { stage2_18d(&mut s); }
0x1eb:  if s.r1 > 0 { stage2_1ac(&mut s); }
0x1f3:  ret

0x1f4:  s.r2 = s.r0;
0x1fa:  s.r2 += 0x1000;
0x204:  s.r4 = s.mem[s.r2 as u32 as usize];
0x20a:  s.r4 &= 0xff;
0x213:  if s.r4 > 0 { stage2_21c(&mut s); }
0x21b:  ret

0x21c:  s.r2 = s.r0;
0x222:  s.r2 *= 0x2;
0x229:  s.r2 += 0x1388;
0x233:  s.r2 = s.mem[s.r2 as u32 as usize];
0x239:  s.r2 &= 0xff;
0x242:  s.r4 ^= s.r2;
0x248:  s.r0 += 0x1;
0x24f:  s.r2 = s.r0;
0x255:  stage2_1d6(&mut s);
0x25a:  s.r4 += s.r0;
0x260:  s.r4 &= 0xff;
0x269:  s.r0 = s.r2;
0x26f:  s.r2 -= 0x1;
0x276:  s.r2 += 0x1194;
0x280:  [r2] = s.r4;
0x287:  stage2_1f4(&mut s);
0x28c:  ret

0x28d:  s.r0 = 0x75bcd15;
0x29c:  s.r1 = 0x0;
0x2a3:  s.r1 += 0x1000;
0x2ad:  s.r1 = s.mem[s.r1 as u32 as usize];
0x2b3:  s.r0 ^= s.r1;
0x2b9:  s.r2 = 0x0;
0x2c0:  s.r2 += 0x3278f102;
0x2cf:  s.r2 ^= s.r0;
0x2d5:  s.r1 = 0x0;
0x2dc:  s.r1 += 0x1800;
0x2e6:  [r1] = s.r2;
0x2ed:  s.r1 = 0x4;
0x2f4:  s.r1 += 0x1000;
0x2fe:  s.r1 = s.mem[s.r1 as u32 as usize];
0x304:  s.r0 ^= s.r1;
0x30a:  s.r2 = 0x0;
0x311:  s.r2 += 0x560aa747;
0x321:  s.r2 ^= s.r0;
0x327:  s.r1 = 0x4;
0x32e:  s.r1 += 0x1800;
0x338:  [r1] = s.r2;
0x33f:  s.r1 = 0x8;
0x346:  s.r1 += 0x1000;
0x350:  s.r1 = s.mem[s.r1 as u32 as usize];
0x356:  s.r0 ^= s.r1;
0x35c:  s.r2 = 0x0;
0x363:  s.r2 += 0x3e6fd176;
0x373:  s.r2 ^= s.r0;
0x379:  s.r1 = 0x8;
0x380:  s.r1 += 0x1800;
0x38a:  [r1] = s.r2;
0x391:  s.r1 = 0xc;
0x399:  s.r1 += 0x1000;
0x3a3:  s.r1 = s.mem[s.r1 as u32 as usize];
0x3a9:  s.r0 ^= s.r1;
0x3af:  s.r2 = 0x0;
0x3b6:  s.r2 += 0x156d86fa;
0x3c5:  s.r2 += 0x66c93320;
0x3d5:  s.r2 ^= s.r0;
0x3db:  s.r1 = 0xc;
0x3e3:  s.r1 += 0x1800;
0x3ed:  [r1] = s.r2;
0x3f4:  s.r1 = 0x10;
0x3fc:  s.r1 += 0x1000;
0x406:  s.r1 = s.mem[s.r1 as u32 as usize];
0x40c:  s.r0 ^= s.r1;
0x412:  s.r2 = 0x0;
0x419:  s.r2 += 0xe5dbc23;
0x428:  s.r2 ^= s.r0;
0x42e:  s.r1 = 0x10;
0x436:  s.r1 += 0x1800;
0x440:  [r1] = s.r2;
0x447:  s.r1 = 0x14;
0x44f:  s.r1 += 0x1000;
0x459:  s.r1 = s.mem[s.r1 as u32 as usize];
0x45f:  s.r0 ^= s.r1;
0x465:  s.r2 = 0x0;
0x46c:  s.r2 += 0xd3f894c;
0x47b:  s.r2 ^= s.r0;
0x481:  s.r1 = 0x14;
0x489:  s.r1 += 0x1800;
0x493:  [r1] = s.r2;
0x49a:  s.r1 = 0x18;
0x4a2:  s.r1 += 0x1000;
0x4ac:  s.r1 = s.mem[s.r1 as u32 as usize];
0x4b2:  s.r0 ^= s.r1;
0x4b8:  s.r2 = 0x0;
0x4bf:  s.r2 += 0x324fe212;
0x4ce:  s.r2 ^= s.r0;
0x4d4:  s.r1 = 0x18;
0x4dc:  s.r1 += 0x1800;
0x4e6:  [r1] = s.r2;
0x4ed:  ret

0x4ee:  s.r0 = 0x0;
0x4f5:  s.r1 = 0x0;
0x4fc:  s.r1 += 0x1194;
0x506:  s.r1 = s.mem[s.r1 as u32 as usize];
0x50c:  s.r2 = 0x0;
0x513:  s.r2 += 0x51eddb21;
0x523:  s.r2 += 0x648c4a88;
0x533:  s.r2 += 0x4355a74c;
0x543:  s.r1 ^= s.r2;
0x549:  s.r0 |= s.r1;
0x54f:  s.r1 = 0x4;
0x556:  s.r1 += 0x1194;
0x560:  s.r1 = s.mem[s.r1 as u32 as usize];
0x566:  s.r2 = 0x0;
0x56d:  s.r2 += 0x32333645;
0x57c:  s.r2 += 0x58728e64;
0x58c:  s.r1 ^= s.r2;
0x592:  s.r0 |= s.r1;
0x598:  s.r1 = 0x8;
0x59f:  s.r1 += 0x1194;
0x5a9:  s.r1 = s.mem[s.r1 as u32 as usize];
0x5af:  s.r2 = 0x0;
0x5b6:  s.r2 += 0x6f57a0a3;
0x5c6:  s.r1 ^= s.r2;
0x5cc:  s.r0 |= s.r1;
0x5d2:  s.r1 = 0xc;
0x5da:  s.r1 += 0x1194;
0x5e4:  s.r1 = s.mem[s.r1 as u32 as usize];
0x5ea:  s.r2 = 0x0;
0x5f1:  s.r2 += 0x22d9bbcc;
0x600:  s.r2 += 0x569fcabc;
0x610:  s.r1 ^= s.r2;
0x616:  s.r0 |= s.r1;
0x61c:  s.r1 = 0x10;
0x624:  s.r1 += 0x1194;
0x62e:  s.r1 = s.mem[s.r1 as u32 as usize];
0x634:  s.r2 = 0x0;
0x63b:  s.r2 += 0xd531548;
0x64a:  s.r1 ^= s.r2;
0x650:  s.r0 |= s.r1;
0x656:  s.r1 = 0x14;
0x65e:  s.r1 += 0x1194;
0x668:  s.r1 = s.mem[s.r1 as u32 as usize];
0x66e:  s.r2 = 0x0;
0x675:  s.r2 += 0x74c2318e;
0x685:  s.r2 += 0x7233f6a3;
0x695:  s.r1 ^= s.r2;
0x69b:  s.r0 |= s.r1;
0x6a1:  s.r1 = 0x18;
0x6a9:  s.r1 += 0x1194;
0x6b3:  s.r1 = s.mem[s.r1 as u32 as usize];
0x6b9:  s.r2 = 0x0;
0x6c0:  s.r2 += 0x6d12a1c5;
0x6d0:  s.r2 += 0x6c3422b6;
0x6e0:  s.r2 += 0xf213d9a;
0x6ef:  s.r1 ^= s.r2;
0x6f5:  s.r0 |= s.r1;
0x6fb:  ret

